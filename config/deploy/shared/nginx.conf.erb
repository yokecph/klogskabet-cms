upstream <%= fetch(:application) %>_unicorn {
  server unix:/tmp/unicorn.<%= fetch(:application) %>.sock fail_timeout=0;
}

# Redirect http/80 to https/443
server {
  listen 80;
  server_name <%= host.hostname %>;

  location / {
    return 301 https://<%= host.hostname %>$request_uri;
  }
}

server {
  server_name <%= host.hostname %>;
  listen 443;
  root <%= current_path %>/public;
  index index.html;

  # Logs
  access_log <%= fetch(:deploy_to) %>/shared/log/nginx.access.log;
  error_log <%= fetch(:deploy_to) %>/shared/log/nginx.error.log;

  # Performance tweaks (see http://vstark.net/2012/10/21/nginx-unicorn-performance-tweaks/ for an overview)
  sendfile on;
  tcp_nopush on;
  tcp_nodelay off;
  client_max_body_size 4G;
  keepalive_timeout 30;

  # SSL config
  ssl on;
  ssl_certificate /etc/ssl/private/star_yoke_dk.pem;
  ssl_certificate_key  /etc/ssl/private/star_yoke_dk.key;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

  # Use Rails' 500-error page
  error_page 500 502 503 504 /500.html;

  # Serve gzipped, cacheable assets
  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }

  location @unicorn {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_pass http://<%= fetch(:application) %>_unicorn;
  }

  # Serve actual files directly, or hand the request off to Unicorn
  try_files $uri $uri/index.html @unicorn;
}
